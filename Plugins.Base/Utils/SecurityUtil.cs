using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace Plugins.Base.Utils
{
    /// <summary>
    /// 安全、加密相关的工具类
    /// </summary>
    public class SecurityUtil
    {
        #region md5
        /// <summary>
        /// 计算字符串的MD5值
        /// </summary>
        /// <param name="str">字符串</param>
        /// <param name="toUpperCase">是否转为大写形式 默认为true</param>
        /// <returns>字符串的MD5值</returns>
        public static string MD5FromString(string str, bool toUpperCase = true)
        {
            MD5 md5 = new MD5CryptoServiceProvider();
            byte[] retVal = md5.ComputeHash(Encoding.UTF8.GetBytes(str));
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < retVal.Length; i++)
            {
                sb.Append(retVal[i].ToString("x2"));
            }
            string code = sb.ToString();
            return toUpperCase ? code.ToUpper() : code.ToLower();
        }

        /// <summary>
        /// 计算文件的MD5值
        /// </summary>
        /// <param name="filename"></param>
        /// <param name="toUpperCase">是否转为大写形式 默认为true</param>
        /// <returns>文件的MD5值</returns>
        public static string MD5FromFile(string filename, bool toUpperCase = true)
        {
            FileStream file = new FileStream(filename, FileMode.Open);
            MD5 md5 = new MD5CryptoServiceProvider();
            byte[] retVal = md5.ComputeHash(file);
            file.Close();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < retVal.Length; i++)
            {
                sb.Append(retVal[i].ToString("x2"));
            }
            string code = sb.ToString();
            return toUpperCase ? code.ToUpper() : code.ToLower();
        }
        #endregion

        #region crc

        #region crc tables
        private static ushort[] crc16Table = new ushort[256]
        {
        0,
        20139,
        40278,
        54269,
        29703,
        15020,
        59729,
        43002,
        59406,
        42661,
        30040,
        15347,
        39945,
        53922,
        351,
        20468,
        40631,
        53276,
        993,
        19786,
        60080,
        42011,
        30694,
        14669,
        30393,
        14354,
        60399,
        42308,
        702,
        19477,
        40936,
        53571,
        29637,
        15726,
        61075,
        41016,
        1986,
        18793,
        39572,
        54335,
        39883,
        54624,
        1693,
        18486,
        61388,
        41319,
        29338,
        15409,
        60786,
        41945,
        28708,
        16015,
        39285,
        55262,
        1059,
        19080,
        1404,
        19415,
        38954,
        54913,
        29051,
        16336,
        60461,
        41606,
        59274,
        43297,
        31452,
        13431,
        37773,
        56614,
        3803,
        16496,
        3972,
        16687,
        37586,
        56441,
        31619,
        13608,
        59093,
        43134,
        31037,
        14230,
        58475,
        43712,
        3386,
        17297,
        36972,
        57031,
        37171,
        57240,
        3173,
        17102,
        58676,
        43935,
        30818,
        14025,
        37967,
        56036,
        2329,
        18354,
        57416,
        44771,
        32030,
        13237,
        31809,
        13034,
        57623,
        44988,
        2118,
        18157,
        38160,
        56251,
        2808,
        17491,
        38830,
        55557,
        32511,
        12372,
        58281,
        44290,
        58102,
        44125,
        32672,
        12555,
        38641,
        55386,
        2983,
        17676,
        33215,
        53012,
        7401,
        21058,
        62904,
        47891,
        26862,
        9797,
        27057,
        10010,
        62695,
        47692,
        7606,
        21277,
        32992,
        52811,
        7944,
        20899,
        33374,
        52469,
        27407,
        9636,
        63065,
        47346,
        63238,
        47533,
        27216,
        9467,
        33537,
        52650,
        7767,
        20732,
        62074,
        48337,
        28460,
        8583,
        34429,
        51414,
        6955,
        21888,
        6772,
        21727,
        34594,
        51593,
        28275,
        8408,
        62245,
        48526,
        27853,
        8806,
        61851,
        48944,
        6346,
        22113,
        34204,
        52023,
        33987,
        51816,
        6549,
        22334,
        61636,
        48751,
        28050,
        9017,
        26165,
        10398,
        64355,
        46536,
        4658,
        23705,
        36708,
        49615,
        36411,
        49296,
        4973,
        24006,
        64060,
        46231,
        26474,
        10689,
        63618,
        46633,
        26068,
        11135,
        35973,
        49710,
        4563,
        24440,
        4236,
        24103,
        36314,
        50033,
        25739,
        10784,
        63965,
        46966,
        5616,
        23387,
        34982,
        50701,
        25079,
        12124,
        64673,
        45578,
        65022,
        45909,
        24744,
        11779,
        35321,
        51026,
        5295,
        23044,
        35655,
        50668,
        5649,
        22714,
        65344,
        45547,
        25110,
        11453,
        25417,
        11746,
        65055,
        45236,
        5966,
        23013,
        35352,
        50355
        };

        private static uint[] crc32Table = new uint[256]
        {
        0u,
        4104977171u,
        502598965u,
        3914987046u,
        1005197930u,
        3477528953u,
        639571807u,
        3535006796u,
        2010395860u,
        2205732807u,
        1780562401u,
        2660090610u,
        1279143614u,
        3096630701u,
        1372267403u,
        2775046296u,
        4020791720u,
        453284539u,
        4066206877u,
        116498318u,
        3561124802u,
        552503505u,
        3384246007u,
        1025213924u,
        2558287228u,
        1825613423u,
        2240368713u,
        1898294106u,
        2744534806u,
        1463467013u,
        3194178083u,
        1255125296u,
        737945667u,
        3746616144u,
        906569078u,
        3265650277u,
        269890089u,
        3837446458u,
        232996636u,
        4182754319u,
        1546132631u,
        2827282308u,
        1105007010u,
        3044141745u,
        1740769021u,
        2473524718u,
        2050427848u,
        2392584411u,
        3293856235u,
        821607160u,
        3651226846u,
        755873741u,
        4290665345u,
        185770130u,
        3796588212u,
        384282023u,
        3011540287u,
        1194102316u,
        2926934026u,
        1524204313u,
        2288676693u,
        2093388870u,
        2510250592u,
        1630771571u,
        1475891334u,
        2740235157u,
        1242389939u,
        3198264992u,
        1813138156u,
        2562634239u,
        1910982617u,
        2236333258u,
        539780178u,
        3565199169u,
        1037658471u,
        3379925620u,
        465993272u,
        4016735531u,
        104035085u,
        4070541342u,
        3092265262u,
        1291633213u,
        2779067419u,
        1359597320u,
        2210014020u,
        1997985879u,
        2655989361u,
        1793316194u,
        3481538042u,
        992540393u,
        3530621135u,
        652082140u,
        4100855696u,
        12774531u,
        3919256229u,
        490201526u,
        2080667845u,
        2292745174u,
        1643214320u,
        2505936611u,
        1206805167u,
        3007486396u,
        1511747482u,
        2931266697u,
        198200337u,
        4286363394u,
        371540260u,
        3800676919u,
        809129595u,
        3298209128u,
        768564046u,
        3647184989u,
        2477527405u,
        1728113278u,
        2388204632u,
        2062935883u,
        2823162631u,
        1558900756u,
        3048408626u,
        1092615457u,
        3833079225u,
        282386090u,
        4186777740u,
        220320671u,
        3750903763u,
        725533888u,
        3261543142u,
        919325173u,
        2951782668u,
        1532779039u,
        2986716217u,
        1185503018u,
        2484779878u,
        1622556789u,
        2314188371u,
        2101562688u,
        3626276312u,
        747138763u,
        3318847725u,
        830301182u,
        3821965234u,
        392328353u,
        4265312903u,
        177699220u,
        1079560356u,
        3035902903u,
        1571669393u,
        2835431042u,
        2075316942u,
        2401118685u,
        1715986427u,
        2464883944u,
        931986544u,
        3273656163u,
        712634693u,
        3738503766u,
        208070170u,
        4173995273u,
        294906671u,
        3846115388u,
        2215414095u,
        1889563228u,
        2583266426u,
        1834319721u,
        3219559205u,
        1263167542u,
        2719194640u,
        1455383811u,
        4091067803u,
        125060744u,
        3995971758u,
        444681149u,
        3358762993u,
        1017011426u,
        3586632388u,
        560681431u,
        1805967591u,
        2668108788u,
        1985080786u,
        2197624513u,
        1347353229u,
        2766274974u,
        1304164280u,
        3105295531u,
        477156403u,
        3906744096u,
        25549062u,
        4113113621u,
        664456793u,
        3543545162u,
        980403052u,
        3468900479u,
        4161335690u,
        212077209u,
        3858627775u,
        290523052u,
        3286428640u,
        927863027u,
        3726108373u,
        716905926u,
        2413610334u,
        2070953549u,
        2452211819u,
        1720005496u,
        3023494964u,
        1083843623u,
        2848182785u,
        1567566098u,
        396400674u,
        3809239857u,
        173380887u,
        4277759492u,
        743080520u,
        3638983003u,
        834637693u,
        3306386542u,
        1618259190u,
        2497206245u,
        2105647555u,
        2301450960u,
        1537128092u,
        2939309455u,
        1181465513u,
        2999402682u,
        3556039113u,
        660087514u,
        3456226556u,
        984428527u,
        3894330275u,
        481441968u,
        4125871766u,
        21443973u,
        2753621277u,
        1351357966u,
        3117801512u,
        1299782459u,
        2680878967u,
        1801849956u,
        2185230914u,
        1989345617u,
        1012707425u,
        3371191154u,
        564772180u,
        3573892679u,
        129411595u,
        4078588184u,
        440641342u,
        4008664109u,
        1267238069u,
        3206840230u,
        1451067776u,
        2731635347u,
        1885511391u,
        2228118988u,
        1838650346u,
        2570807545u
        };
        #endregion

        /// <summary>
        /// CRC16校验
        /// </summary>
        /// <param name="data">待校验数据</param>
        /// <returns></returns>
        public static ushort CRC16(byte[] data)
        {
            ushort value = 65535;
            for (int i = 0; i < data.Length; i++)
            {
                byte vByte = data[i];
                value = (ushort)((value << 8 | vByte) ^ crc16Table[value >> 8 & 255]);
            }
            return value;
        }

        /// <summary>
        /// CRC32校验
        /// </summary>
        /// <param name="data">待校验数据</param>
        /// <param name="size">数据量</param>
        /// <returns></returns>
        public static uint CRC32(byte[] data, int size)
        {
            uint value = 4294967295u;
            for (int i = 0; i < size; i++)
            {
                byte b = data[i];
                value = ((value << 8 | b) ^ crc32Table[value >> 24 & 255]);
            }
            return value;
        }
        #endregion
    }
}
